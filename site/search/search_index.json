{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo","text":"<p>Seja bem vindo a documenta\u00e7\u00e3o do Tech Challenge 01 - Embrapa utilizando mkdocs.org.</p>"},{"location":"#arquitetura-do-projeto","title":"Arquitetura do projeto","text":"<p>Com o intuito de facilitar a manuten\u00e7\u00e3o e tempo de desenvolvimento, este projeto utiliza uma  abordagem de design de software conhecida por arquitetura modular.</p> <p>Para saber mais sobre este modelo de arquitetura, leia o artigo da AppMaster.</p> <p>A ideia surgiu para permitir adapta\u00e7\u00f5es r\u00e1pidas e maior flexibilidade para atender \u00e0s necessidades do projeto.</p>"},{"location":"#layout-do-projeto","title":"Layout do projeto","text":"<p>A estrutura de diret\u00f3rios e arquivos \u00e9 composta da seguinte forma:</p> <pre><code>src                 # Diret\u00f3rio principal\n    auth/               # M\u00f3dulo de autentica\u00e7\u00e3o e cliente\n        dependencies        # Utilit\u00e1rio respons\u00e1vel por valida\u00e7\u00f5es de token JWT\n        routes              # Camada de entrada respons\u00e1vel pela autentica\u00e7\u00e3o e visualiza\u00e7\u00e3o de cadastro\n        schemas             # Camada que contem modelos de transfer\u00eancia (DTO) para o modelo de persist\u00eancia \n        services            # Camada de servi\u00e7o respons\u00e1vel pela comunica\u00e7\u00e3o com o banco de dados\n        utils               # Utilit\u00e1rio respons\u00e1vel pela encodifica\u00e7\u00e3o/decodifica\u00e7\u00e3o de token JWT\n    db/                 # M\u00f3dulo de entidades\n        main                # Camada respons\u00e1vel pela sess\u00e3o entre aplica\u00e7\u00e3o e banco de dados\n        models              # Camada respons\u00e1vel pelas entidades que comp\u00f5em o projeto\n    viticulture/        # M\u00f3dulo de categorias e subcategorias\n        clients             # Camada de comunica\u00e7\u00e3o externa e tratamento de dados para persist\u00eancia\n        enums               # Camada respons\u00e1vel por persist\u00eancia e busca de dados\n        routes              # Camada de entrada respons\u00e1vel pela persist\u00eancia e busca de dados\n        schemas             # Camada que contem modelos de transfer\u00eancia (DTO) para o modelo de persist\u00eancia\n        services            # Camada de servi\u00e7o respons\u00e1vel pela comunica\u00e7\u00e3o com o banco de dados\n        utils               # Utilit\u00e1rio respons\u00e1vel pela l\u00f3gica de busca em ambiente externo\n    __init__            # Camada principal respons\u00e1vel por centralizar as configura\u00e7\u00f5es do projeto\n    config              # Camada respons\u00e1vel por configurar todos os par\u00e2metros a partir de um arquivo \".env\"\n    mail                # Camada respons\u00e1vel pela configura\u00e7\u00e3o para envio de emails\n    middleware          # Camada respons\u00e1vel pela configura\u00e7\u00e3o de CORS e logs personalizados\n</code></pre>"},{"location":"#requisitos-para-ambiente-local","title":"Requisitos para ambiente local","text":"<p>Para iniciar a execu\u00e7\u00e3o e compreens\u00e3o deste projeto, \u00e9 importante seguir os passos abaixo:</p> <ul> <li>Fa\u00e7a uma c\u00f3pia do arquivo .env.text e crie um arquivo .env;</li> <li>Preencha cada uma das vari\u00e1veis de acordo com o seu ambiente de desenvolvimento;</li> <li>Crie um banco de dados e realize as migrations com o comando: <code>alembic upgrade head</code>;</li> <li>Ao utilizar a aplica\u00e7\u00e3o em ambiente local, ser\u00e1 poss\u00edvel visualizar a documenta\u00e7\u00e3o pelo modelo Swagger e Redoc. Variando o dom\u00ednio de acordo com o ambiente que voc\u00ea estiver executando;</li> <li>Para utilizar a API respons\u00e1vel realizar um cadastro e em seguida se autenticar para que seja poss\u00edvel visualizar o conte\u00fado extra\u00eddo do site da Embrapa;</li> <li>Antes de realizar qualquer modifica\u00e7\u00e3o, instalar hook do pre-commit <code>pre-commit install</code>;</li> <li>Para atualizar a documenta\u00e7\u00e3o, basta atualizar este arquivo e em seguida utilizar o comando <code>mkdocs build</code> para que ele seja atualizado no diret\u00f3rio site;</li> <li>Para visualizar apenas a documenta\u00e7\u00e3o, basta utilizar o comando: <code>mkdocs serve</code>;</li> <li>Para executar o projeto em ambiente local, basta utilizar o comando: <code>fastapi dev src/</code>.</li> </ul>"},{"location":"#principais-bibliotecas-para-o-desenvolvimento","title":"Principais bibliotecas para o desenvolvimento","text":"<p>Esta se\u00e7\u00e3o tem como objetivo descrever as bibliotecas mais importantes que foram utilizadas neste projeto.</p> <ul> <li>Alembic: Ferramenta de migra\u00e7\u00e3o de banco de dados para SQLAlchemy, facilitando versionamento e atualiza\u00e7\u00e3o de esquemas.</li> <li>Asyncpg: Cliente PostgreSQL ass\u00edncrono eficiente e r\u00e1pido, ideal para aplica\u00e7\u00f5es de alto desempenho.</li> <li>Bcrypt: Biblioteca de hashing de senhas segura, resistente a ataques de for\u00e7a bruta.</li> <li>FastAPI: Framework web moderno e r\u00e1pido para APIs, baseado em Python e tipo hints.</li> <li>Fastapi-Mail: Biblioteca para envio de e-mails ass\u00edncronos com FastAPI e suporte a templates.</li> <li>ItsDangerous: Ferramenta para criar tokens seguros e assinar dados de forma confi\u00e1vel.</li> <li>Pre Commit: Framework para gerenciamento de hooks Git, automatizando verifica\u00e7\u00f5es antes de commits.</li> <li>Pydantic: Valida\u00e7\u00e3o de dados poderosa baseada em Python, usando modelos e tipo hints.</li> <li>Pydantic Settings: Gerenciamento de configura\u00e7\u00f5es utilizando Pydantic, facilitando valida\u00e7\u00e3o e carregamento de vari\u00e1veis.</li> <li>Pylint: Ferramenta de an\u00e1lise de c\u00f3digo Python que verifica padr\u00f5es e boas pr\u00e1ticas.</li> <li>PyJWT: Manipula\u00e7\u00e3o de tokens JWT para autentica\u00e7\u00e3o segura em aplica\u00e7\u00f5es web.</li> <li>SQLModel: Biblioteca para manipula\u00e7\u00e3o de bancos de dados usando Pydantic e SQLAlchemy de maneira intuitiva.</li> </ul>"},{"location":"#passos-para-o-deploy-utilizando-o-render","title":"Passos para o deploy utilizando o Render","text":"<p>Esta se\u00e7\u00e3o tr\u00e1s uma breve descri\u00e7\u00e3o dos passos necess\u00e1rios para o deploy de uma  aplica\u00e7\u00e3o utilizando o Render como plataforma.</p> <ul> <li>Configurar um banco de dados Postgres;</li> <li>Executar a aplica\u00e7\u00e3o em ambiente local com a nova conex\u00e3o da base de dados para atualizar todas as tabelas;</li> <li>Configurar um novo Web Service;</li> <li>Incluir todas as vari\u00e1veis inclusas no arquivo .env;</li> <li>Acompanhar o deploy das aplica\u00e7\u00f5es e realizar o teste de acordo com o endere\u00e7o atribu\u00eddo.</li> </ul>"},{"location":"#fluxos-de-cada-etapa-funcional","title":"Fluxos de cada etapa funcional","text":"<ul> <li>Cadastro com envio de e-mail</li> </ul> <pre><code>graph TD;\n    A[Usu\u00e1rio Preenche Cadastro] --&gt; B[Valida Dados]\n    B --&gt; C{Dados V\u00e1lidos?}\n    C -- N\u00e3o --&gt; D[Exibe Erro]\n    C -- Sim --&gt; E[Salva no Banco de Dados]\n    E --&gt; F[Envia Email de Confirma\u00e7\u00e3o]\n    F --&gt; G[Cadastro Conclu\u00eddo]\n</code></pre> <ul> <li>Login com verifica\u00e7\u00e3o de e-mail</li> </ul> <pre><code>graph TD;\n    A[Usu\u00e1rio Insere Credenciais] --&gt; B[Valida Credenciais]\n    B --&gt; C{Email Verificado?}\n    C -- N\u00e3o --&gt; D[Retorna Erro]\n    C -- Sim --&gt; E[Acesso Permitido]\n\n</code></pre> <ul> <li>Consulta e armazenamento de dados da API da Embrapa</li> </ul> <pre><code>graph TD;\n    A[Usu\u00e1rio Possui Sess\u00e3o V\u00e1lida?] --&gt;|Sim| B[Consulta API da Embrapa]\n    A --&gt;|N\u00e3o| C[Retorna Mensagem de Erro]\n    B --&gt; D{Dados j\u00e1 existem no banco?}\n    D -- Sim --&gt; E[Retorna Mensagem: Dados j\u00e1 existentes]\n    D -- N\u00e3o --&gt; F[Salva Dados no Banco]\n</code></pre>"},{"location":"#modelagem-do-banco-de-dados","title":"Modelagem do banco de dados","text":"<ul> <li>Modelagem do banco de dados para este projeto</li> </ul> <pre><code>erDiagram\n    tb_users {\n        UUID uid\n        VARCHAR(255) first_name\n        VARCHAR(255) last_name\n        VARCHAR(255) username\n        VARCHAR(255) email\n        VARCHAR(255) password\n        BOOLEAN is_verified\n        TIMESTAMP created_at\n        TIMESTAMP updated_at\n    }\n\n    tb_category ||--o{ tb_subcategory : references\n\n    tb_category {\n        UUID uid\n        VARCHAR(255) category\n        TIMESTAMP created_at\n        TIMESTAMP updated_at\n    }\n\n    tb_subcategory {\n        UUID uid\n        VARCHAR(255) subcategory\n        VARCHAR(255) control\n        VARCHAR(255) product\n        VARCHAR(255) country\n        FLOAT qty_product\n        FLOAT vl_product\n        INTEGER year\n        UUID category_uid\n        TIMESTAMP created_at\n        TIMESTAMP updated_at\n    }\n</code></pre>"}]}